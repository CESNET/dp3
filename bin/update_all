#!/usr/bin/env python3
"""Issue a task containing a given "event" for all entities in DB (matching given criteria)"""

import sys
import os
import argparse
import logging
import time

sys.path.insert(1, os.path.join(os.path.dirname(__file__), '..'))
from dp3.task_processing.task_queue import TaskQueueWriter
from dp3.common.config import read_config_dir, load_attr_spec
from dp3.database.database import EntityDatabase

# parse arguments
parser = argparse.ArgumentParser(
    prog="update_all",
    description='Issue a task containing a given "event" for each entity in the database (matching given criteria).'
)
parser.add_argument('app_name', metavar='APP_NAME',
                    help="Name of the application to distinct it from other DP3-based apps (it's used as a prefix of "
                         "RabbitMQ queue names, for example).")
parser.add_argument('config_dir', metavar='CONFIG_DIRECTORY',
                    help="Path to a directory containing configuration files (e.g. /etc/my_app/config)")
parser.add_argument('etype', metavar='ENTITY_TYPE',
                    help="Type of entity (e.g. 'ip')")
parser.add_argument('event', metavar='EVENT_NAME',
                    help="Event name (leading '!' is not necessary, e.g. 'update_attr_x')")
# parser.add_argument('-c', '--condition', metavar='WHERE_CLAUSE',
#                     help="Condition to select only some of the entities. In the form of an SQL 'WHERE' clause "
#                          "(available columns: 'eid', 'ts_added', 'ts_last_update' and all attribute names; "
#                          "expected time format: YYYY-MM-DDTHH:MM:SS)")
parser.add_argument('-r', '--rate', metavar='N', default=10, type=int,
                    help="Number of tasks issued per second (default: 10)")
parser.add_argument('--limit', metavar='N', type=int,
                    help="Maximum number of entities updated.")
parser.add_argument('--dry', dest="dry", action="store_true", help="Dry mode - don't issue any task, just get the"
                                                                   " number of entities matching given criteria.")
group = parser.add_mutually_exclusive_group()
group.add_argument("-v", dest="verbose", action="store_true", help="Verbose mode - print more info, including IDs of all records being updated.")
group.add_argument("-q", dest="quiet", action="store_true", help="Quite mode - only print errors")
args = parser.parse_args()

# Set up logging
LOGFORMAT = "%(asctime)-15s,%(name)s [%(levelname)s] %(message)s"
LOGDATEFORMAT = "%Y-%m-%dT%H:%M:%S"
# log level of all other loggers (those of dp3 internal components)
log_level = logging.INFO if args.verbose else logging.WARNING
logging.basicConfig(level=log_level, format=LOGFORMAT, datefmt=LOGDATEFORMAT)
# logger for this script
log = logging.getLogger('UpdateAll')
log.setLevel(logging.WARNING if args.quiet else logging.INFO)

# Load configuration
log.info(f"Loading config dir {args.config_dir}")
config = read_config_dir(args.config_dir, recursive=True)
db_config = config.get("database")
attr_spec = load_attr_spec(config.get("db_entities"))
# TODO check existence of args.etype in attr_spec

rabbit_params = config.get('processing_core.rabbitmq', {})
num_processes = config.get('processing_core.worker_processes')

# Connect to DB and get list of entities to update
log.info("Fetching list of entity IDs to update ...")
db = EntityDatabase(db_config, attr_spec)
eids = db.search(args.etype, limit=args.limit)
if eids is None:
    sys.exit(1)
log.info(f"{len(eids)} records of type '{args.etype}' will be updated ...")

# Create connection to task queue (RabbitMQ)
log.info("Connecting to RabbitMQ...")
tqw = TaskQueueWriter(args.app_name, num_processes, rabbit_params)
try:
    tqw.connect()
    tqw.check()
except Exception as e:
    log.error(e)
    sys.exit(2)

if args.dry:
    log.info("Issuing tasks skipped due to --dry mode.")
    tqw.disconnect()
    sys.exit(0)

event = args.event
if not event.startswith('!'):
    event = '!' + event

# Put tasks
# (Send them in batches of size args.rate, one batch every second)
log.info("Issuing tasks ...")
t1 = time.time()
for n, eid in enumerate(eids, 1):
    if args.verbose:
        print(f"({n}/{len(eids)}) {eid}")
    tqw.put_task(etype=args.etype, ekey=eid, events=[event], src="update_all")
    if n % args.rate == 0:
        # whole batch was sent
        if not args.verbose and not args.quiet:
            print(f"{n} tasks sent", end="\r", flush=True)
        # wait for one second minus the time spent by sending
        t2 = time.time()
        sleep_duration = 1 - (t2 - t1)
        if sleep_duration > 0:
            time.sleep(sleep_duration)
        t1 = time.time()

log.info("Done")

# Close connection
tqw.disconnect()


